// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: chat/v1/stream.proto

package chatv1

import (
	v1 "github.com/harmony-development/legato/gen/harmonytypes/v1"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// A reason for why a user has left a guild.
type StreamEvent_LeaveReason int32

const (
	// The user left the guild willingly.
	StreamEvent_LEAVE_REASON_WILLINGLY_UNSPECIFIED StreamEvent_LeaveReason = 0
	// The user was banned from the guild.
	StreamEvent_LEAVE_REASON_BANNED StreamEvent_LeaveReason = 1
	// The user was kicked from the guild.
	StreamEvent_LEAVE_REASON_KICKED StreamEvent_LeaveReason = 2
)

// Enum value maps for StreamEvent_LeaveReason.
var (
	StreamEvent_LeaveReason_name = map[int32]string{
		0: "LEAVE_REASON_WILLINGLY_UNSPECIFIED",
		1: "LEAVE_REASON_BANNED",
		2: "LEAVE_REASON_KICKED",
	}
	StreamEvent_LeaveReason_value = map[string]int32{
		"LEAVE_REASON_WILLINGLY_UNSPECIFIED": 0,
		"LEAVE_REASON_BANNED":                1,
		"LEAVE_REASON_KICKED":                2,
	}
)

func (x StreamEvent_LeaveReason) Enum() *StreamEvent_LeaveReason {
	p := new(StreamEvent_LeaveReason)
	*p = x
	return p
}

func (x StreamEvent_LeaveReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StreamEvent_LeaveReason) Descriptor() protoreflect.EnumDescriptor {
	return file_chat_v1_stream_proto_enumTypes[0].Descriptor()
}

func (StreamEvent_LeaveReason) Type() protoreflect.EnumType {
	return &file_chat_v1_stream_proto_enumTypes[0]
}

func (x StreamEvent_LeaveReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StreamEvent_LeaveReason.Descriptor instead.
func (StreamEvent_LeaveReason) EnumDescriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 0}
}

// Request type for use in the `StreamEvents` endpoint.
type StreamRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Describes which event source to subscribe to.
	//
	// Types that are assignable to Request:
	//	*StreamRequest_SubscribeToGuild_
	//	*StreamRequest_SubscribeToActions_
	//	*StreamRequest_SubscribeToHomeserverEvents_
	Request isStreamRequest_Request `protobuf_oneof:"request"`
}

func (x *StreamRequest) Reset() {
	*x = StreamRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest) ProtoMessage() {}

func (x *StreamRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest.ProtoReflect.Descriptor instead.
func (*StreamRequest) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{0}
}

func (m *StreamRequest) GetRequest() isStreamRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *StreamRequest) GetSubscribeToGuild() *StreamRequest_SubscribeToGuild {
	if x, ok := x.GetRequest().(*StreamRequest_SubscribeToGuild_); ok {
		return x.SubscribeToGuild
	}
	return nil
}

func (x *StreamRequest) GetSubscribeToActions() *StreamRequest_SubscribeToActions {
	if x, ok := x.GetRequest().(*StreamRequest_SubscribeToActions_); ok {
		return x.SubscribeToActions
	}
	return nil
}

func (x *StreamRequest) GetSubscribeToHomeserverEvents() *StreamRequest_SubscribeToHomeserverEvents {
	if x, ok := x.GetRequest().(*StreamRequest_SubscribeToHomeserverEvents_); ok {
		return x.SubscribeToHomeserverEvents
	}
	return nil
}

type isStreamRequest_Request interface {
	isStreamRequest_Request()
}

type StreamRequest_SubscribeToGuild_ struct {
	// Subscribe to the guild event source.
	SubscribeToGuild *StreamRequest_SubscribeToGuild `protobuf:"bytes,1,opt,name=subscribe_to_guild,json=subscribeToGuild,proto3,oneof"`
}

type StreamRequest_SubscribeToActions_ struct {
	// Subscribe to the action event source.
	SubscribeToActions *StreamRequest_SubscribeToActions `protobuf:"bytes,2,opt,name=subscribe_to_actions,json=subscribeToActions,proto3,oneof"`
}

type StreamRequest_SubscribeToHomeserverEvents_ struct {
	// Subscribe to the homeserver event source.
	SubscribeToHomeserverEvents *StreamRequest_SubscribeToHomeserverEvents `protobuf:"bytes,3,opt,name=subscribe_to_homeserver_events,json=subscribeToHomeserverEvents,proto3,oneof"`
}

func (*StreamRequest_SubscribeToGuild_) isStreamRequest_Request() {}

func (*StreamRequest_SubscribeToActions_) isStreamRequest_Request() {}

func (*StreamRequest_SubscribeToHomeserverEvents_) isStreamRequest_Request() {}

// Describes an event.
type StreamEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Which event to send.
	//
	// Types that are assignable to Event:
	//	*StreamEvent_GuildAddedToList_
	//	*StreamEvent_GuildRemovedFromList_
	//	*StreamEvent_ActionPerformed_
	//	*StreamEvent_SentMessage
	//	*StreamEvent_EditedMessage
	//	*StreamEvent_DeletedMessage
	//	*StreamEvent_CreatedChannel
	//	*StreamEvent_EditedChannel
	//	*StreamEvent_DeletedChannel
	//	*StreamEvent_ChannelsReordered_
	//	*StreamEvent_EditedGuild
	//	*StreamEvent_DeletedGuild
	//	*StreamEvent_JoinedMember
	//	*StreamEvent_LeftMember
	//	*StreamEvent_Typing_
	//	*StreamEvent_RoleCreated_
	//	*StreamEvent_RoleDeleted_
	//	*StreamEvent_RoleMoved_
	//	*StreamEvent_RoleUpdated_
	//	*StreamEvent_RolePermsUpdated
	//	*StreamEvent_UserRolesUpdated_
	//	*StreamEvent_PermissionUpdated_
	//	*StreamEvent_MessagePinned_
	//	*StreamEvent_MessageUnpinned_
	Event isStreamEvent_Event `protobuf_oneof:"event"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent.ProtoReflect.Descriptor instead.
func (*StreamEvent) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1}
}

func (m *StreamEvent) GetEvent() isStreamEvent_Event {
	if m != nil {
		return m.Event
	}
	return nil
}

func (x *StreamEvent) GetGuildAddedToList() *StreamEvent_GuildAddedToList {
	if x, ok := x.GetEvent().(*StreamEvent_GuildAddedToList_); ok {
		return x.GuildAddedToList
	}
	return nil
}

func (x *StreamEvent) GetGuildRemovedFromList() *StreamEvent_GuildRemovedFromList {
	if x, ok := x.GetEvent().(*StreamEvent_GuildRemovedFromList_); ok {
		return x.GuildRemovedFromList
	}
	return nil
}

func (x *StreamEvent) GetActionPerformed() *StreamEvent_ActionPerformed {
	if x, ok := x.GetEvent().(*StreamEvent_ActionPerformed_); ok {
		return x.ActionPerformed
	}
	return nil
}

func (x *StreamEvent) GetSentMessage() *StreamEvent_MessageSent {
	if x, ok := x.GetEvent().(*StreamEvent_SentMessage); ok {
		return x.SentMessage
	}
	return nil
}

func (x *StreamEvent) GetEditedMessage() *StreamEvent_MessageUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_EditedMessage); ok {
		return x.EditedMessage
	}
	return nil
}

func (x *StreamEvent) GetDeletedMessage() *StreamEvent_MessageDeleted {
	if x, ok := x.GetEvent().(*StreamEvent_DeletedMessage); ok {
		return x.DeletedMessage
	}
	return nil
}

func (x *StreamEvent) GetCreatedChannel() *StreamEvent_ChannelCreated {
	if x, ok := x.GetEvent().(*StreamEvent_CreatedChannel); ok {
		return x.CreatedChannel
	}
	return nil
}

func (x *StreamEvent) GetEditedChannel() *StreamEvent_ChannelUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_EditedChannel); ok {
		return x.EditedChannel
	}
	return nil
}

func (x *StreamEvent) GetDeletedChannel() *StreamEvent_ChannelDeleted {
	if x, ok := x.GetEvent().(*StreamEvent_DeletedChannel); ok {
		return x.DeletedChannel
	}
	return nil
}

func (x *StreamEvent) GetChannelsReordered() *StreamEvent_ChannelsReordered {
	if x, ok := x.GetEvent().(*StreamEvent_ChannelsReordered_); ok {
		return x.ChannelsReordered
	}
	return nil
}

func (x *StreamEvent) GetEditedGuild() *StreamEvent_GuildUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_EditedGuild); ok {
		return x.EditedGuild
	}
	return nil
}

func (x *StreamEvent) GetDeletedGuild() *StreamEvent_GuildDeleted {
	if x, ok := x.GetEvent().(*StreamEvent_DeletedGuild); ok {
		return x.DeletedGuild
	}
	return nil
}

func (x *StreamEvent) GetJoinedMember() *StreamEvent_MemberJoined {
	if x, ok := x.GetEvent().(*StreamEvent_JoinedMember); ok {
		return x.JoinedMember
	}
	return nil
}

func (x *StreamEvent) GetLeftMember() *StreamEvent_MemberLeft {
	if x, ok := x.GetEvent().(*StreamEvent_LeftMember); ok {
		return x.LeftMember
	}
	return nil
}

func (x *StreamEvent) GetTyping() *StreamEvent_Typing {
	if x, ok := x.GetEvent().(*StreamEvent_Typing_); ok {
		return x.Typing
	}
	return nil
}

func (x *StreamEvent) GetRoleCreated() *StreamEvent_RoleCreated {
	if x, ok := x.GetEvent().(*StreamEvent_RoleCreated_); ok {
		return x.RoleCreated
	}
	return nil
}

func (x *StreamEvent) GetRoleDeleted() *StreamEvent_RoleDeleted {
	if x, ok := x.GetEvent().(*StreamEvent_RoleDeleted_); ok {
		return x.RoleDeleted
	}
	return nil
}

func (x *StreamEvent) GetRoleMoved() *StreamEvent_RoleMoved {
	if x, ok := x.GetEvent().(*StreamEvent_RoleMoved_); ok {
		return x.RoleMoved
	}
	return nil
}

func (x *StreamEvent) GetRoleUpdated() *StreamEvent_RoleUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_RoleUpdated_); ok {
		return x.RoleUpdated
	}
	return nil
}

func (x *StreamEvent) GetRolePermsUpdated() *StreamEvent_RolePermissionsUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_RolePermsUpdated); ok {
		return x.RolePermsUpdated
	}
	return nil
}

func (x *StreamEvent) GetUserRolesUpdated() *StreamEvent_UserRolesUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_UserRolesUpdated_); ok {
		return x.UserRolesUpdated
	}
	return nil
}

func (x *StreamEvent) GetPermissionUpdated() *StreamEvent_PermissionUpdated {
	if x, ok := x.GetEvent().(*StreamEvent_PermissionUpdated_); ok {
		return x.PermissionUpdated
	}
	return nil
}

func (x *StreamEvent) GetMessagePinned() *StreamEvent_MessagePinned {
	if x, ok := x.GetEvent().(*StreamEvent_MessagePinned_); ok {
		return x.MessagePinned
	}
	return nil
}

func (x *StreamEvent) GetMessageUnpinned() *StreamEvent_MessageUnpinned {
	if x, ok := x.GetEvent().(*StreamEvent_MessageUnpinned_); ok {
		return x.MessageUnpinned
	}
	return nil
}

type isStreamEvent_Event interface {
	isStreamEvent_Event()
}

type StreamEvent_GuildAddedToList_ struct {
	// Send the guild added to list event.
	GuildAddedToList *StreamEvent_GuildAddedToList `protobuf:"bytes,1,opt,name=guild_added_to_list,json=guildAddedToList,proto3,oneof"`
}

type StreamEvent_GuildRemovedFromList_ struct {
	// Send the guild removed from list event.
	GuildRemovedFromList *StreamEvent_GuildRemovedFromList `protobuf:"bytes,2,opt,name=guild_removed_from_list,json=guildRemovedFromList,proto3,oneof"`
}

type StreamEvent_ActionPerformed_ struct {
	// Send the action performed event.
	ActionPerformed *StreamEvent_ActionPerformed `protobuf:"bytes,3,opt,name=action_performed,json=actionPerformed,proto3,oneof"`
}

type StreamEvent_SentMessage struct {
	// Send the message sent event.
	SentMessage *StreamEvent_MessageSent `protobuf:"bytes,4,opt,name=sent_message,json=sentMessage,proto3,oneof"`
}

type StreamEvent_EditedMessage struct {
	// Send the message updated event.
	EditedMessage *StreamEvent_MessageUpdated `protobuf:"bytes,5,opt,name=edited_message,json=editedMessage,proto3,oneof"`
}

type StreamEvent_DeletedMessage struct {
	// Send the message deleted event.
	DeletedMessage *StreamEvent_MessageDeleted `protobuf:"bytes,6,opt,name=deleted_message,json=deletedMessage,proto3,oneof"`
}

type StreamEvent_CreatedChannel struct {
	// Send the channel created event.
	CreatedChannel *StreamEvent_ChannelCreated `protobuf:"bytes,7,opt,name=created_channel,json=createdChannel,proto3,oneof"`
}

type StreamEvent_EditedChannel struct {
	// Send the channel updated event.
	EditedChannel *StreamEvent_ChannelUpdated `protobuf:"bytes,8,opt,name=edited_channel,json=editedChannel,proto3,oneof"`
}

type StreamEvent_DeletedChannel struct {
	// Send the channel deleted event.
	DeletedChannel *StreamEvent_ChannelDeleted `protobuf:"bytes,9,opt,name=deleted_channel,json=deletedChannel,proto3,oneof"`
}

type StreamEvent_ChannelsReordered_ struct {
	// The channels have been completely reordered.
	ChannelsReordered *StreamEvent_ChannelsReordered `protobuf:"bytes,27,opt,name=channels_reordered,json=channelsReordered,proto3,oneof"`
}

type StreamEvent_EditedGuild struct {
	// Send the guild updated event.
	EditedGuild *StreamEvent_GuildUpdated `protobuf:"bytes,10,opt,name=edited_guild,json=editedGuild,proto3,oneof"`
}

type StreamEvent_DeletedGuild struct {
	// Send the guild deleted event.
	DeletedGuild *StreamEvent_GuildDeleted `protobuf:"bytes,11,opt,name=deleted_guild,json=deletedGuild,proto3,oneof"`
}

type StreamEvent_JoinedMember struct {
	// Send the member joined event.
	JoinedMember *StreamEvent_MemberJoined `protobuf:"bytes,12,opt,name=joined_member,json=joinedMember,proto3,oneof"`
}

type StreamEvent_LeftMember struct {
	// Send the member left event.
	LeftMember *StreamEvent_MemberLeft `protobuf:"bytes,13,opt,name=left_member,json=leftMember,proto3,oneof"`
}

type StreamEvent_Typing_ struct {
	// Send the typing event.
	Typing *StreamEvent_Typing `protobuf:"bytes,15,opt,name=typing,proto3,oneof"`
}

type StreamEvent_RoleCreated_ struct {
	// Send the role created event.
	RoleCreated *StreamEvent_RoleCreated `protobuf:"bytes,16,opt,name=role_created,json=roleCreated,proto3,oneof"`
}

type StreamEvent_RoleDeleted_ struct {
	// Send the role deleted event.
	RoleDeleted *StreamEvent_RoleDeleted `protobuf:"bytes,17,opt,name=role_deleted,json=roleDeleted,proto3,oneof"`
}

type StreamEvent_RoleMoved_ struct {
	// Send the role moved event.
	RoleMoved *StreamEvent_RoleMoved `protobuf:"bytes,18,opt,name=role_moved,json=roleMoved,proto3,oneof"`
}

type StreamEvent_RoleUpdated_ struct {
	// Send the role updated event.
	RoleUpdated *StreamEvent_RoleUpdated `protobuf:"bytes,19,opt,name=role_updated,json=roleUpdated,proto3,oneof"`
}

type StreamEvent_RolePermsUpdated struct {
	// Send the role perms updated event.
	RolePermsUpdated *StreamEvent_RolePermissionsUpdated `protobuf:"bytes,20,opt,name=role_perms_updated,json=rolePermsUpdated,proto3,oneof"`
}

type StreamEvent_UserRolesUpdated_ struct {
	// Send the user roles updated event.
	UserRolesUpdated *StreamEvent_UserRolesUpdated `protobuf:"bytes,21,opt,name=user_roles_updated,json=userRolesUpdated,proto3,oneof"`
}

type StreamEvent_PermissionUpdated_ struct {
	// Send the permission updated event.
	PermissionUpdated *StreamEvent_PermissionUpdated `protobuf:"bytes,22,opt,name=permission_updated,json=permissionUpdated,proto3,oneof"`
}

type StreamEvent_MessagePinned_ struct {
	// Send the message pinned event.
	MessagePinned *StreamEvent_MessagePinned `protobuf:"bytes,28,opt,name=message_pinned,json=messagePinned,proto3,oneof"`
}

type StreamEvent_MessageUnpinned_ struct {
	// Send the message unpinned event.
	MessageUnpinned *StreamEvent_MessageUnpinned `protobuf:"bytes,29,opt,name=message_unpinned,json=messageUnpinned,proto3,oneof"`
}

func (*StreamEvent_GuildAddedToList_) isStreamEvent_Event() {}

func (*StreamEvent_GuildRemovedFromList_) isStreamEvent_Event() {}

func (*StreamEvent_ActionPerformed_) isStreamEvent_Event() {}

func (*StreamEvent_SentMessage) isStreamEvent_Event() {}

func (*StreamEvent_EditedMessage) isStreamEvent_Event() {}

func (*StreamEvent_DeletedMessage) isStreamEvent_Event() {}

func (*StreamEvent_CreatedChannel) isStreamEvent_Event() {}

func (*StreamEvent_EditedChannel) isStreamEvent_Event() {}

func (*StreamEvent_DeletedChannel) isStreamEvent_Event() {}

func (*StreamEvent_ChannelsReordered_) isStreamEvent_Event() {}

func (*StreamEvent_EditedGuild) isStreamEvent_Event() {}

func (*StreamEvent_DeletedGuild) isStreamEvent_Event() {}

func (*StreamEvent_JoinedMember) isStreamEvent_Event() {}

func (*StreamEvent_LeftMember) isStreamEvent_Event() {}

func (*StreamEvent_Typing_) isStreamEvent_Event() {}

func (*StreamEvent_RoleCreated_) isStreamEvent_Event() {}

func (*StreamEvent_RoleDeleted_) isStreamEvent_Event() {}

func (*StreamEvent_RoleMoved_) isStreamEvent_Event() {}

func (*StreamEvent_RoleUpdated_) isStreamEvent_Event() {}

func (*StreamEvent_RolePermsUpdated) isStreamEvent_Event() {}

func (*StreamEvent_UserRolesUpdated_) isStreamEvent_Event() {}

func (*StreamEvent_PermissionUpdated_) isStreamEvent_Event() {}

func (*StreamEvent_MessagePinned_) isStreamEvent_Event() {}

func (*StreamEvent_MessageUnpinned_) isStreamEvent_Event() {}

// Event source for guilds' events.
type StreamRequest_SubscribeToGuild struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// the guild id to subscribe to
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *StreamRequest_SubscribeToGuild) Reset() {
	*x = StreamRequest_SubscribeToGuild{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest_SubscribeToGuild) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest_SubscribeToGuild) ProtoMessage() {}

func (x *StreamRequest_SubscribeToGuild) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest_SubscribeToGuild.ProtoReflect.Descriptor instead.
func (*StreamRequest_SubscribeToGuild) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{0, 0}
}

func (x *StreamRequest_SubscribeToGuild) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

// Event source for actions' events.
type StreamRequest_SubscribeToActions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRequest_SubscribeToActions) Reset() {
	*x = StreamRequest_SubscribeToActions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest_SubscribeToActions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest_SubscribeToActions) ProtoMessage() {}

func (x *StreamRequest_SubscribeToActions) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest_SubscribeToActions.ProtoReflect.Descriptor instead.
func (*StreamRequest_SubscribeToActions) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{0, 1}
}

// Event source for homeserver events.
type StreamRequest_SubscribeToHomeserverEvents struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *StreamRequest_SubscribeToHomeserverEvents) Reset() {
	*x = StreamRequest_SubscribeToHomeserverEvents{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamRequest_SubscribeToHomeserverEvents) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamRequest_SubscribeToHomeserverEvents) ProtoMessage() {}

func (x *StreamRequest_SubscribeToHomeserverEvents) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamRequest_SubscribeToHomeserverEvents.ProtoReflect.Descriptor instead.
func (*StreamRequest_SubscribeToHomeserverEvents) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{0, 2}
}

// Event sent when a new message is sent.
type StreamEvent_MessageSent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID that is sent by your client it can use to confirm that the message is sent.
	EchoId uint64 `protobuf:"varint,1,opt,name=echo_id,json=echoId,proto3" json:"echo_id,omitempty"`
	// The actual message.
	Message *Message `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *StreamEvent_MessageSent) Reset() {
	*x = StreamEvent_MessageSent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MessageSent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MessageSent) ProtoMessage() {}

func (x *StreamEvent_MessageSent) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MessageSent.ProtoReflect.Descriptor instead.
func (*StreamEvent_MessageSent) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 0}
}

func (x *StreamEvent_MessageSent) GetEchoId() uint64 {
	if x != nil {
		return x.EchoId
	}
	return 0
}

func (x *StreamEvent_MessageSent) GetMessage() *Message {
	if x != nil {
		return x.Message
	}
	return nil
}

// Event sent when a message's text content is updated.
type StreamEvent_MessageUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message ID of the message that was updated.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// When this message was edited.
	EditedAt *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=edited_at,json=editedAt,proto3" json:"edited_at,omitempty"`
	// New message content.
	NewContent string `protobuf:"bytes,5,opt,name=new_content,json=newContent,proto3" json:"new_content,omitempty"`
}

func (x *StreamEvent_MessageUpdated) Reset() {
	*x = StreamEvent_MessageUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MessageUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MessageUpdated) ProtoMessage() {}

func (x *StreamEvent_MessageUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MessageUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_MessageUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 1}
}

func (x *StreamEvent_MessageUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_MessageUpdated) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_MessageUpdated) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *StreamEvent_MessageUpdated) GetEditedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.EditedAt
	}
	return nil
}

func (x *StreamEvent_MessageUpdated) GetNewContent() string {
	if x != nil {
		return x.NewContent
	}
	return ""
}

// Event sent when a message is deleted.
type StreamEvent_MessageDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message ID of the message that was deleted.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StreamEvent_MessageDeleted) Reset() {
	*x = StreamEvent_MessageDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MessageDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MessageDeleted) ProtoMessage() {}

func (x *StreamEvent_MessageDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MessageDeleted.ProtoReflect.Descriptor instead.
func (*StreamEvent_MessageDeleted) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 2}
}

func (x *StreamEvent_MessageDeleted) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_MessageDeleted) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_MessageDeleted) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// Event sent when a new channel is created.
type StreamEvent_ChannelCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Name of this channel.
	Name string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	// the position in the channel list.
	Position *v1.ItemPosition `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// Is this channel a category or not.
	IsCategory bool `protobuf:"varint,5,opt,name=is_category,json=isCategory,proto3" json:"is_category,omitempty"`
	// Metadata for this channel.
	Metadata *v1.Metadata `protobuf:"bytes,6,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *StreamEvent_ChannelCreated) Reset() {
	*x = StreamEvent_ChannelCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_ChannelCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_ChannelCreated) ProtoMessage() {}

func (x *StreamEvent_ChannelCreated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_ChannelCreated.ProtoReflect.Descriptor instead.
func (*StreamEvent_ChannelCreated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 3}
}

func (x *StreamEvent_ChannelCreated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_ChannelCreated) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_ChannelCreated) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *StreamEvent_ChannelCreated) GetPosition() *v1.ItemPosition {
	if x != nil {
		return x.Position
	}
	return nil
}

func (x *StreamEvent_ChannelCreated) GetIsCategory() bool {
	if x != nil {
		return x.IsCategory
	}
	return false
}

func (x *StreamEvent_ChannelCreated) GetMetadata() *v1.Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// Event sent when a channel's information or position in the channel is changed.
type StreamEvent_ChannelUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId   uint64           `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	NewName     *string          `protobuf:"bytes,3,opt,name=new_name,json=newName,proto3,oneof" json:"new_name,omitempty"`
	NewPosition *v1.ItemPosition `protobuf:"bytes,4,opt,name=new_position,json=newPosition,proto3,oneof" json:"new_position,omitempty"`
	NewMetadata *v1.Metadata     `protobuf:"bytes,5,opt,name=new_metadata,json=newMetadata,proto3,oneof" json:"new_metadata,omitempty"`
}

func (x *StreamEvent_ChannelUpdated) Reset() {
	*x = StreamEvent_ChannelUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_ChannelUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_ChannelUpdated) ProtoMessage() {}

func (x *StreamEvent_ChannelUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_ChannelUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_ChannelUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 4}
}

func (x *StreamEvent_ChannelUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_ChannelUpdated) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_ChannelUpdated) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *StreamEvent_ChannelUpdated) GetNewPosition() *v1.ItemPosition {
	if x != nil {
		return x.NewPosition
	}
	return nil
}

func (x *StreamEvent_ChannelUpdated) GetNewMetadata() *v1.Metadata {
	if x != nil {
		return x.NewMetadata
	}
	return nil
}

// Event sent when all channels have been reordered
type StreamEvent_ChannelsReordered struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// guild_id: the guild whose channels are being reordered
	GuildId uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// channel_ids: the new order of channel IDs
	ChannelIds []uint64 `protobuf:"varint,1,rep,packed,name=channel_ids,json=channelIds,proto3" json:"channel_ids,omitempty"`
}

func (x *StreamEvent_ChannelsReordered) Reset() {
	*x = StreamEvent_ChannelsReordered{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_ChannelsReordered) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_ChannelsReordered) ProtoMessage() {}

func (x *StreamEvent_ChannelsReordered) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_ChannelsReordered.ProtoReflect.Descriptor instead.
func (*StreamEvent_ChannelsReordered) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 5}
}

func (x *StreamEvent_ChannelsReordered) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_ChannelsReordered) GetChannelIds() []uint64 {
	if x != nil {
		return x.ChannelIds
	}
	return nil
}

// Event sent when a channel is deleted.
type StreamEvent_ChannelDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *StreamEvent_ChannelDeleted) Reset() {
	*x = StreamEvent_ChannelDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_ChannelDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_ChannelDeleted) ProtoMessage() {}

func (x *StreamEvent_ChannelDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_ChannelDeleted.ProtoReflect.Descriptor instead.
func (*StreamEvent_ChannelDeleted) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 6}
}

func (x *StreamEvent_ChannelDeleted) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_ChannelDeleted) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// Event sent when a guild's information is updated.
type StreamEvent_GuildUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId     uint64       `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	NewName     *string      `protobuf:"bytes,2,opt,name=new_name,json=newName,proto3,oneof" json:"new_name,omitempty"`
	NewPicture  *string      `protobuf:"bytes,3,opt,name=new_picture,json=newPicture,proto3,oneof" json:"new_picture,omitempty"`
	NewMetadata *v1.Metadata `protobuf:"bytes,4,opt,name=new_metadata,json=newMetadata,proto3,oneof" json:"new_metadata,omitempty"`
}

func (x *StreamEvent_GuildUpdated) Reset() {
	*x = StreamEvent_GuildUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_GuildUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_GuildUpdated) ProtoMessage() {}

func (x *StreamEvent_GuildUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_GuildUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_GuildUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 7}
}

func (x *StreamEvent_GuildUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_GuildUpdated) GetNewName() string {
	if x != nil && x.NewName != nil {
		return *x.NewName
	}
	return ""
}

func (x *StreamEvent_GuildUpdated) GetNewPicture() string {
	if x != nil && x.NewPicture != nil {
		return *x.NewPicture
	}
	return ""
}

func (x *StreamEvent_GuildUpdated) GetNewMetadata() *v1.Metadata {
	if x != nil {
		return x.NewMetadata
	}
	return nil
}

// Event sent when a guild is deleted.
type StreamEvent_GuildDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *StreamEvent_GuildDeleted) Reset() {
	*x = StreamEvent_GuildDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_GuildDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_GuildDeleted) ProtoMessage() {}

func (x *StreamEvent_GuildDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_GuildDeleted.ProtoReflect.Descriptor instead.
func (*StreamEvent_GuildDeleted) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 8}
}

func (x *StreamEvent_GuildDeleted) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

// Event sent a user joins to a guild.
type StreamEvent_MemberJoined struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Member ID of the member that joined the guild.
	MemberId uint64 `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
}

func (x *StreamEvent_MemberJoined) Reset() {
	*x = StreamEvent_MemberJoined{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MemberJoined) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MemberJoined) ProtoMessage() {}

func (x *StreamEvent_MemberJoined) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MemberJoined.ProtoReflect.Descriptor instead.
func (*StreamEvent_MemberJoined) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 9}
}

func (x *StreamEvent_MemberJoined) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *StreamEvent_MemberJoined) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

// Event sent when a member of a guild leaves said guild for whatever reason.
type StreamEvent_MemberLeft struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID of the member that left the guild.
	MemberId uint64 `protobuf:"varint,1,opt,name=member_id,json=memberId,proto3" json:"member_id,omitempty"`
	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Why this member left the guild.
	LeaveReason StreamEvent_LeaveReason `protobuf:"varint,3,opt,name=leave_reason,json=leaveReason,proto3,enum=protocol.chat.v1.StreamEvent_LeaveReason" json:"leave_reason,omitempty"`
}

func (x *StreamEvent_MemberLeft) Reset() {
	*x = StreamEvent_MemberLeft{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MemberLeft) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MemberLeft) ProtoMessage() {}

func (x *StreamEvent_MemberLeft) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MemberLeft.ProtoReflect.Descriptor instead.
func (*StreamEvent_MemberLeft) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 10}
}

func (x *StreamEvent_MemberLeft) GetMemberId() uint64 {
	if x != nil {
		return x.MemberId
	}
	return 0
}

func (x *StreamEvent_MemberLeft) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_MemberLeft) GetLeaveReason() StreamEvent_LeaveReason {
	if x != nil {
		return x.LeaveReason
	}
	return StreamEvent_LEAVE_REASON_WILLINGLY_UNSPECIFIED
}

// Event sent when you join a new guild.
type StreamEvent_GuildAddedToList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// The homeserver this guild is on.
	Homeserver string `protobuf:"bytes,2,opt,name=homeserver,proto3" json:"homeserver,omitempty"`
}

func (x *StreamEvent_GuildAddedToList) Reset() {
	*x = StreamEvent_GuildAddedToList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_GuildAddedToList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_GuildAddedToList) ProtoMessage() {}

func (x *StreamEvent_GuildAddedToList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_GuildAddedToList.ProtoReflect.Descriptor instead.
func (*StreamEvent_GuildAddedToList) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 11}
}

func (x *StreamEvent_GuildAddedToList) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_GuildAddedToList) GetHomeserver() string {
	if x != nil {
		return x.Homeserver
	}
	return ""
}

// Event sent when you leave a guild.
type StreamEvent_GuildRemovedFromList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// The homeserver this guild is on.
	Homeserver string `protobuf:"bytes,2,opt,name=homeserver,proto3" json:"homeserver,omitempty"`
}

func (x *StreamEvent_GuildRemovedFromList) Reset() {
	*x = StreamEvent_GuildRemovedFromList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_GuildRemovedFromList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_GuildRemovedFromList) ProtoMessage() {}

func (x *StreamEvent_GuildRemovedFromList) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_GuildRemovedFromList.ProtoReflect.Descriptor instead.
func (*StreamEvent_GuildRemovedFromList) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 12}
}

func (x *StreamEvent_GuildRemovedFromList) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_GuildRemovedFromList) GetHomeserver() string {
	if x != nil {
		return x.Homeserver
	}
	return ""
}

// Event sent when an action is performed.
type StreamEvent_ActionPerformed struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message ID where this event happened.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
	// Action ID of the action that was performed.
	ActionId string `protobuf:"bytes,4,opt,name=action_id,json=actionId,proto3" json:"action_id,omitempty"`
	// Action data.
	ActionData string `protobuf:"bytes,5,opt,name=action_data,json=actionData,proto3" json:"action_data,omitempty"`
}

func (x *StreamEvent_ActionPerformed) Reset() {
	*x = StreamEvent_ActionPerformed{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_ActionPerformed) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_ActionPerformed) ProtoMessage() {}

func (x *StreamEvent_ActionPerformed) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_ActionPerformed.ProtoReflect.Descriptor instead.
func (*StreamEvent_ActionPerformed) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 13}
}

func (x *StreamEvent_ActionPerformed) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_ActionPerformed) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_ActionPerformed) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

func (x *StreamEvent_ActionPerformed) GetActionId() string {
	if x != nil {
		return x.ActionId
	}
	return ""
}

func (x *StreamEvent_ActionPerformed) GetActionData() string {
	if x != nil {
		return x.ActionData
	}
	return ""
}

// Event sent when a role's position in the role list is changed.
type StreamEvent_RoleMoved struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Role ID of the role that was moved.
	RoleId      uint64           `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	NewPosition *v1.ItemPosition `protobuf:"bytes,3,opt,name=new_position,json=newPosition,proto3" json:"new_position,omitempty"`
}

func (x *StreamEvent_RoleMoved) Reset() {
	*x = StreamEvent_RoleMoved{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_RoleMoved) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_RoleMoved) ProtoMessage() {}

func (x *StreamEvent_RoleMoved) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_RoleMoved.ProtoReflect.Descriptor instead.
func (*StreamEvent_RoleMoved) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 14}
}

func (x *StreamEvent_RoleMoved) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_RoleMoved) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *StreamEvent_RoleMoved) GetNewPosition() *v1.ItemPosition {
	if x != nil {
		return x.NewPosition
	}
	return nil
}

// Event sent when a role is deleted.
type StreamEvent_RoleDeleted struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Role ID of the role that was deleted.
	RoleId uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
}

func (x *StreamEvent_RoleDeleted) Reset() {
	*x = StreamEvent_RoleDeleted{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_RoleDeleted) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_RoleDeleted) ProtoMessage() {}

func (x *StreamEvent_RoleDeleted) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_RoleDeleted.ProtoReflect.Descriptor instead.
func (*StreamEvent_RoleDeleted) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 15}
}

func (x *StreamEvent_RoleDeleted) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_RoleDeleted) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

// Event sent when a role is created.
type StreamEvent_RoleCreated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Role ID of the role that was created.
	RoleId uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The actual role.
	Role *Role `protobuf:"bytes,3,opt,name=role,proto3" json:"role,omitempty"`
}

func (x *StreamEvent_RoleCreated) Reset() {
	*x = StreamEvent_RoleCreated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_RoleCreated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_RoleCreated) ProtoMessage() {}

func (x *StreamEvent_RoleCreated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_RoleCreated.ProtoReflect.Descriptor instead.
func (*StreamEvent_RoleCreated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 16}
}

func (x *StreamEvent_RoleCreated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_RoleCreated) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *StreamEvent_RoleCreated) GetRole() *Role {
	if x != nil {
		return x.Role
	}
	return nil
}

// Event sent when a role's information is changed.
type StreamEvent_RoleUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Role ID of the role that was changed.
	RoleId uint64 `protobuf:"varint,2,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The actual new role.
	NewRole *Role `protobuf:"bytes,3,opt,name=new_role,json=newRole,proto3" json:"new_role,omitempty"`
}

func (x *StreamEvent_RoleUpdated) Reset() {
	*x = StreamEvent_RoleUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_RoleUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_RoleUpdated) ProtoMessage() {}

func (x *StreamEvent_RoleUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_RoleUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_RoleUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 17}
}

func (x *StreamEvent_RoleUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_RoleUpdated) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *StreamEvent_RoleUpdated) GetNewRole() *Role {
	if x != nil {
		return x.NewRole
	}
	return nil
}

// Event sent when a role's permissions are changed.
//
// This event will only be sent to users with the "guild.manage" permission.
type StreamEvent_RolePermissionsUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Role ID of the role that had it's permissions changed.
	RoleId uint64 `protobuf:"varint,3,opt,name=role_id,json=roleId,proto3" json:"role_id,omitempty"`
	// The new permissions.
	NewPerms *PermissionList `protobuf:"bytes,4,opt,name=new_perms,json=newPerms,proto3" json:"new_perms,omitempty"`
}

func (x *StreamEvent_RolePermissionsUpdated) Reset() {
	*x = StreamEvent_RolePermissionsUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_RolePermissionsUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_RolePermissionsUpdated) ProtoMessage() {}

func (x *StreamEvent_RolePermissionsUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_RolePermissionsUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_RolePermissionsUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 18}
}

func (x *StreamEvent_RolePermissionsUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_RolePermissionsUpdated) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_RolePermissionsUpdated) GetRoleId() uint64 {
	if x != nil {
		return x.RoleId
	}
	return 0
}

func (x *StreamEvent_RolePermissionsUpdated) GetNewPerms() *PermissionList {
	if x != nil {
		return x.NewPerms
	}
	return nil
}

// Event sent when a user's roles are changed.
type StreamEvent_UserRolesUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// User ID of the user that had it's roles changed.
	UserId uint64 `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// The new role IDs.
	NewRoleIds []uint64 `protobuf:"varint,3,rep,packed,name=new_role_ids,json=newRoleIds,proto3" json:"new_role_ids,omitempty"`
}

func (x *StreamEvent_UserRolesUpdated) Reset() {
	*x = StreamEvent_UserRolesUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_UserRolesUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_UserRolesUpdated) ProtoMessage() {}

func (x *StreamEvent_UserRolesUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_UserRolesUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_UserRolesUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 19}
}

func (x *StreamEvent_UserRolesUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_UserRolesUpdated) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StreamEvent_UserRolesUpdated) GetNewRoleIds() []uint64 {
	if x != nil {
		return x.NewRoleIds
	}
	return nil
}

// Event sent when a user sends a typing notification in a guild channel.
type StreamEvent_Typing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User ID of the user that sent the typing notification.
	UserId uint64 `protobuf:"varint,1,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,2,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,3,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
}

func (x *StreamEvent_Typing) Reset() {
	*x = StreamEvent_Typing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_Typing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_Typing) ProtoMessage() {}

func (x *StreamEvent_Typing) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_Typing.ProtoReflect.Descriptor instead.
func (*StreamEvent_Typing) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 20}
}

func (x *StreamEvent_Typing) GetUserId() uint64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *StreamEvent_Typing) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_Typing) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

// Event sent when a permission is changed that matters to you.
//
// Servers should calculate which users to send this event to when a permission is set.
// It should only be sent if a user is subscribed to the guild the permission pertains to.
type StreamEvent_PermissionUpdated struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event happened.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event happened.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// The permission node that was changed.
	Query string `protobuf:"bytes,3,opt,name=query,proto3" json:"query,omitempty"`
	// Whether you have the permission or not.
	Ok bool `protobuf:"varint,4,opt,name=ok,proto3" json:"ok,omitempty"`
}

func (x *StreamEvent_PermissionUpdated) Reset() {
	*x = StreamEvent_PermissionUpdated{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_PermissionUpdated) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_PermissionUpdated) ProtoMessage() {}

func (x *StreamEvent_PermissionUpdated) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_PermissionUpdated.ProtoReflect.Descriptor instead.
func (*StreamEvent_PermissionUpdated) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 21}
}

func (x *StreamEvent_PermissionUpdated) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_PermissionUpdated) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_PermissionUpdated) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *StreamEvent_PermissionUpdated) GetOk() bool {
	if x != nil {
		return x.Ok
	}
	return false
}

// Sent when a message is pinned in a guild channel.
//
// Should only be sent to users who have the "message.view" permission for
// the guild channel where the message was pinned.
type StreamEvent_MessagePinned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event occured.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event occured.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message ID of the message that was pinned.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StreamEvent_MessagePinned) Reset() {
	*x = StreamEvent_MessagePinned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MessagePinned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MessagePinned) ProtoMessage() {}

func (x *StreamEvent_MessagePinned) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MessagePinned.ProtoReflect.Descriptor instead.
func (*StreamEvent_MessagePinned) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 22}
}

func (x *StreamEvent_MessagePinned) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_MessagePinned) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_MessagePinned) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

// Sent when a message is unpinned in a guild channel.
//
// Should only be sent to users who have the "message.view" permission for
// the guild channel where the message was unpinned.
type StreamEvent_MessageUnpinned struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Guild ID of the guild where this event occured.
	GuildId uint64 `protobuf:"varint,1,opt,name=guild_id,json=guildId,proto3" json:"guild_id,omitempty"`
	// Channel ID of the channel where this event occured.
	ChannelId uint64 `protobuf:"varint,2,opt,name=channel_id,json=channelId,proto3" json:"channel_id,omitempty"`
	// Message ID of the message that was unpinned.
	MessageId uint64 `protobuf:"varint,3,opt,name=message_id,json=messageId,proto3" json:"message_id,omitempty"`
}

func (x *StreamEvent_MessageUnpinned) Reset() {
	*x = StreamEvent_MessageUnpinned{}
	if protoimpl.UnsafeEnabled {
		mi := &file_chat_v1_stream_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StreamEvent_MessageUnpinned) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StreamEvent_MessageUnpinned) ProtoMessage() {}

func (x *StreamEvent_MessageUnpinned) ProtoReflect() protoreflect.Message {
	mi := &file_chat_v1_stream_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StreamEvent_MessageUnpinned.ProtoReflect.Descriptor instead.
func (*StreamEvent_MessageUnpinned) Descriptor() ([]byte, []int) {
	return file_chat_v1_stream_proto_rawDescGZIP(), []int{1, 23}
}

func (x *StreamEvent_MessageUnpinned) GetGuildId() uint64 {
	if x != nil {
		return x.GuildId
	}
	return 0
}

func (x *StreamEvent_MessageUnpinned) GetChannelId() uint64 {
	if x != nil {
		return x.ChannelId
	}
	return 0
}

func (x *StreamEvent_MessageUnpinned) GetMessageId() uint64 {
	if x != nil {
		return x.MessageId
	}
	return 0
}

var File_chat_v1_stream_proto protoreflect.FileDescriptor

var file_chat_v1_stream_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x1a, 0x1b, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e,
	0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f,
	0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76, 0x31, 0x2f, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xcd, 0x03, 0x0a, 0x0d, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x60, 0x0a, 0x12, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x67, 0x75, 0x69, 0x6c,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x48, 0x00, 0x52, 0x10, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x66, 0x0a,
	0x14, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x48,
	0x00, 0x52, 0x12, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x41, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x82, 0x01, 0x0a, 0x1e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x5f, 0x74, 0x6f, 0x5f, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x48, 0x00, 0x52, 0x1b, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x48, 0x6f, 0x6d, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x1a, 0x2d, 0x0a, 0x10, 0x53, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x14, 0x0a, 0x12, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x1a,
	0x1d, 0x0a, 0x1b, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x54, 0x6f, 0x48, 0x6f,
	0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x09,
	0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xca, 0x29, 0x0a, 0x0b, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x5f, 0x0a, 0x13, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x61, 0x64, 0x64, 0x65, 0x64, 0x5f, 0x74, 0x6f, 0x5f, 0x6c, 0x69, 0x73, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x65, 0x64,
	0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x10, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x41,
	0x64, 0x64, 0x65, 0x64, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x6b, 0x0a, 0x17, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x5f, 0x66, 0x72, 0x6f, 0x6d,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64,
	0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x14, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x64, 0x46,
	0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5a, 0x0a, 0x10, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x5f, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x2e, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0f, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x73, 0x65, 0x6e, 0x74, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x53, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x65, 0x6e, 0x74, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x55, 0x0a, 0x0e, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x64, 0x69,
	0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63,
	0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x64, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x57, 0x0a, 0x0f, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x55, 0x0a, 0x0e,
	0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x12, 0x57, 0x0a, 0x0f, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x60, 0x0a, 0x12,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x5f, 0x72, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72,
	0x65, 0x64, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73,
	0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x48, 0x00, 0x52, 0x11, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x4f,
	0x0a, 0x0c, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x48, 0x00, 0x52, 0x0b, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x12,
	0x51, 0x0a, 0x0d, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x5f, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x47, 0x75, 0x69,
	0x6c, 0x64, 0x12, 0x51, 0x0a, 0x0d, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72,
	0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4a,
	0x6f, 0x69, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0c, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x4d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x4b, 0x0a, 0x0b, 0x6c, 0x65, 0x66, 0x74, 0x5f, 0x6d, 0x65,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4c, 0x65, 0x66, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x6c, 0x65, 0x66, 0x74, 0x4d, 0x65, 0x6d, 0x62,
	0x65, 0x72, 0x12, 0x3e, 0x0a, 0x06, 0x74, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x48, 0x00, 0x52, 0x06, 0x74, 0x79, 0x70, 0x69,
	0x6e, 0x67, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0c, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65,
	0x74, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x64, 0x12, 0x48, 0x0a, 0x0a, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x6f, 0x76, 0x65, 0x64,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x09, 0x72, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x4e, 0x0a, 0x0c,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x13, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68,
	0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00, 0x52,
	0x0b, 0x72, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x64, 0x0a, 0x12,
	0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x73, 0x5f, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x72, 0x6f, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x6d, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x5e, 0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48, 0x00,
	0x52, 0x10, 0x75, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x64, 0x12, 0x60, 0x0a, 0x12, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x5f, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x48,
	0x00, 0x52, 0x11, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x54, 0x0a, 0x0e, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e,
	0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0d, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x5a, 0x0a, 0x10, 0x6d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x75, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x18, 0x1d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x69, 0x6e,
	0x6e, 0x65, 0x64, 0x48, 0x00, 0x52, 0x0f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55, 0x6e,
	0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x1a, 0x5b, 0x0a, 0x0b, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x53, 0x65, 0x6e, 0x74, 0x12, 0x17, 0x0a, 0x07, 0x65, 0x63, 0x68, 0x6f, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x65, 0x63, 0x68, 0x6f, 0x49, 0x64, 0x12, 0x33,
	0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0xc3, 0x01, 0x0a, 0x0e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x12,
	0x37, 0x0a, 0x09, 0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x08,
	0x65, 0x64, 0x69, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x65, 0x77, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x6e,
	0x65, 0x77, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x69, 0x0a, 0x0e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x1a, 0x83, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x08, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1f, 0x0a, 0x0b, 0x69, 0x73, 0x5f,
	0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a,
	0x69, 0x73, 0x43, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x79, 0x12, 0x3e, 0x0a, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0xb5, 0x02, 0x0a, 0x0e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a,
	0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x07, 0x6e, 0x65, 0x77,
	0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x4e, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70,
	0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x01, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01, 0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x48, 0x02, 0x52, 0x0b, 0x6e, 0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x1a, 0x4f, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x6f, 0x72, 0x64, 0x65, 0x72, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c,
	0x49, 0x64, 0x73, 0x1a, 0x4a, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64,
	0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a,
	0xe9, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x08, 0x6e,
	0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x07, 0x6e, 0x65, 0x77, 0x4e, 0x61, 0x6d, 0x65, 0x88, 0x01, 0x01, 0x12, 0x24, 0x0a, 0x0b, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x0a, 0x6e, 0x65, 0x77, 0x50, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x88, 0x01,
	0x01, 0x12, 0x4a, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x76, 0x31, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x48, 0x02, 0x52, 0x0b, 0x6e,
	0x65, 0x77, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x88, 0x01, 0x01, 0x42, 0x0b, 0x0a,
	0x09, 0x5f, 0x6e, 0x65, 0x77, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x70, 0x69, 0x63, 0x74, 0x75, 0x72, 0x65, 0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x6e,
	0x65, 0x77, 0x5f, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x1a, 0x29, 0x0a, 0x0c, 0x47,
	0x75, 0x69, 0x6c, 0x64, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x46, 0x0a, 0x0c, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x4a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65,
	0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x1a, 0x92,
	0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x4c, 0x65, 0x66, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x08, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x49, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x4c, 0x0a, 0x0c, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x5f, 0x72,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x4c, 0x65, 0x61, 0x76, 0x65,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x0b, 0x6c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x1a, 0x4d, 0x0a, 0x10, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x41, 0x64, 0x64, 0x65,
	0x64, 0x54, 0x6f, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64,
	0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x1a, 0x51, 0x0a, 0x14, 0x47, 0x75, 0x69, 0x6c, 0x64, 0x52, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x64, 0x46, 0x72, 0x6f, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75,
	0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x68, 0x6f, 0x6d, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x1a, 0xa8, 0x01, 0x0a, 0x0f, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x50, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69,
	0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x5f, 0x69,
	0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12,
	0x1f, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x1a, 0x8a, 0x01, 0x0a, 0x09, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x6f, 0x76, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x49, 0x0a, 0x0c, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x2e, 0x68, 0x61, 0x72, 0x6d, 0x6f, 0x6e, 0x79, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x76, 0x31, 0x2e, 0x49, 0x74, 0x65, 0x6d, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x0b, 0x6e, 0x65, 0x77, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x41, 0x0a,
	0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65, 0x49, 0x64,
	0x1a, 0x6d, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x2a, 0x0a, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61,
	0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x04, 0x72, 0x6f, 0x6c, 0x65, 0x1a,
	0x74, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f, 0x6c,
	0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c, 0x65,
	0x49, 0x64, 0x12, 0x31, 0x0a, 0x08, 0x6e, 0x65, 0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e,
	0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x07, 0x6e, 0x65,
	0x77, 0x52, 0x6f, 0x6c, 0x65, 0x1a, 0xaa, 0x01, 0x0a, 0x16, 0x52, 0x6f, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x09, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x72, 0x6f,
	0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x72, 0x6f, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x3d, 0x0a, 0x09, 0x6e, 0x65, 0x77, 0x5f, 0x70, 0x65, 0x72, 0x6d, 0x73,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x2e, 0x50, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x08, 0x6e, 0x65, 0x77, 0x50, 0x65, 0x72,
	0x6d, 0x73, 0x1a, 0x68, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f,
	0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x6e, 0x65,
	0x77, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x04,
	0x52, 0x0a, 0x6e, 0x65, 0x77, 0x52, 0x6f, 0x6c, 0x65, 0x49, 0x64, 0x73, 0x1a, 0x5b, 0x0a, 0x06,
	0x54, 0x79, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x1a, 0x73, 0x0a, 0x11, 0x50, 0x65, 0x72,
	0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x12, 0x19,
	0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x72,
	0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x71, 0x75, 0x65, 0x72, 0x79, 0x12, 0x0e,
	0x0a, 0x02, 0x6f, 0x6b, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x02, 0x6f, 0x6b, 0x1a, 0x68,
	0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x50, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x67, 0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68,
	0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x49, 0x64, 0x1a, 0x6a, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x55, 0x6e, 0x70, 0x69, 0x6e, 0x6e, 0x65, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x67,
	0x75, 0x69, 0x6c, 0x64, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63, 0x68, 0x61, 0x6e,
	0x6e, 0x65, 0x6c, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x49, 0x64, 0x22, 0x67, 0x0a, 0x0b, 0x4c, 0x65, 0x61, 0x76, 0x65, 0x52, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x22, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41,
	0x53, 0x4f, 0x4e, 0x5f, 0x57, 0x49, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x4c, 0x59, 0x5f, 0x55, 0x4e,
	0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x4c,
	0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45, 0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x42, 0x41, 0x4e, 0x4e,
	0x45, 0x44, 0x10, 0x01, 0x12, 0x17, 0x0a, 0x13, 0x4c, 0x45, 0x41, 0x56, 0x45, 0x5f, 0x52, 0x45,
	0x41, 0x53, 0x4f, 0x4e, 0x5f, 0x4b, 0x49, 0x43, 0x4b, 0x45, 0x44, 0x10, 0x02, 0x42, 0x07, 0x0a,
	0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x42, 0xbf, 0x01, 0x0a, 0x14, 0x63, 0x6f, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x63, 0x68, 0x61, 0x74, 0x2e, 0x76, 0x31, 0x42,
	0x0b, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x38,
	0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x68, 0x61, 0x72, 0x6d, 0x6f,
	0x6e, 0x79, 0x2d, 0x64, 0x65, 0x76, 0x65, 0x6c, 0x6f, 0x70, 0x6d, 0x65, 0x6e, 0x74, 0x2f, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x6f, 0x2f, 0x67, 0x65, 0x6e, 0x2f, 0x63, 0x68, 0x61, 0x74, 0x2f, 0x76,
	0x31, 0x3b, 0x63, 0x68, 0x61, 0x74, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x43, 0x58, 0xaa, 0x02,
	0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x2e, 0x43, 0x68, 0x61, 0x74, 0x2e, 0x56,
	0x31, 0xca, 0x02, 0x10, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c, 0x43, 0x68, 0x61,
	0x74, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x1c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x5c,
	0x43, 0x68, 0x61, 0x74, 0x5c, 0x56, 0x31, 0x5c, 0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0xea, 0x02, 0x12, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x3a, 0x3a,
	0x43, 0x68, 0x61, 0x74, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chat_v1_stream_proto_rawDescOnce sync.Once
	file_chat_v1_stream_proto_rawDescData = file_chat_v1_stream_proto_rawDesc
)

func file_chat_v1_stream_proto_rawDescGZIP() []byte {
	file_chat_v1_stream_proto_rawDescOnce.Do(func() {
		file_chat_v1_stream_proto_rawDescData = protoimpl.X.CompressGZIP(file_chat_v1_stream_proto_rawDescData)
	})
	return file_chat_v1_stream_proto_rawDescData
}

var file_chat_v1_stream_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_chat_v1_stream_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_chat_v1_stream_proto_goTypes = []interface{}{
	(StreamEvent_LeaveReason)(0),                      // 0: protocol.chat.v1.StreamEvent.LeaveReason
	(*StreamRequest)(nil),                             // 1: protocol.chat.v1.StreamRequest
	(*StreamEvent)(nil),                               // 2: protocol.chat.v1.StreamEvent
	(*StreamRequest_SubscribeToGuild)(nil),            // 3: protocol.chat.v1.StreamRequest.SubscribeToGuild
	(*StreamRequest_SubscribeToActions)(nil),          // 4: protocol.chat.v1.StreamRequest.SubscribeToActions
	(*StreamRequest_SubscribeToHomeserverEvents)(nil), // 5: protocol.chat.v1.StreamRequest.SubscribeToHomeserverEvents
	(*StreamEvent_MessageSent)(nil),                   // 6: protocol.chat.v1.StreamEvent.MessageSent
	(*StreamEvent_MessageUpdated)(nil),                // 7: protocol.chat.v1.StreamEvent.MessageUpdated
	(*StreamEvent_MessageDeleted)(nil),                // 8: protocol.chat.v1.StreamEvent.MessageDeleted
	(*StreamEvent_ChannelCreated)(nil),                // 9: protocol.chat.v1.StreamEvent.ChannelCreated
	(*StreamEvent_ChannelUpdated)(nil),                // 10: protocol.chat.v1.StreamEvent.ChannelUpdated
	(*StreamEvent_ChannelsReordered)(nil),             // 11: protocol.chat.v1.StreamEvent.ChannelsReordered
	(*StreamEvent_ChannelDeleted)(nil),                // 12: protocol.chat.v1.StreamEvent.ChannelDeleted
	(*StreamEvent_GuildUpdated)(nil),                  // 13: protocol.chat.v1.StreamEvent.GuildUpdated
	(*StreamEvent_GuildDeleted)(nil),                  // 14: protocol.chat.v1.StreamEvent.GuildDeleted
	(*StreamEvent_MemberJoined)(nil),                  // 15: protocol.chat.v1.StreamEvent.MemberJoined
	(*StreamEvent_MemberLeft)(nil),                    // 16: protocol.chat.v1.StreamEvent.MemberLeft
	(*StreamEvent_GuildAddedToList)(nil),              // 17: protocol.chat.v1.StreamEvent.GuildAddedToList
	(*StreamEvent_GuildRemovedFromList)(nil),          // 18: protocol.chat.v1.StreamEvent.GuildRemovedFromList
	(*StreamEvent_ActionPerformed)(nil),               // 19: protocol.chat.v1.StreamEvent.ActionPerformed
	(*StreamEvent_RoleMoved)(nil),                     // 20: protocol.chat.v1.StreamEvent.RoleMoved
	(*StreamEvent_RoleDeleted)(nil),                   // 21: protocol.chat.v1.StreamEvent.RoleDeleted
	(*StreamEvent_RoleCreated)(nil),                   // 22: protocol.chat.v1.StreamEvent.RoleCreated
	(*StreamEvent_RoleUpdated)(nil),                   // 23: protocol.chat.v1.StreamEvent.RoleUpdated
	(*StreamEvent_RolePermissionsUpdated)(nil),        // 24: protocol.chat.v1.StreamEvent.RolePermissionsUpdated
	(*StreamEvent_UserRolesUpdated)(nil),              // 25: protocol.chat.v1.StreamEvent.UserRolesUpdated
	(*StreamEvent_Typing)(nil),                        // 26: protocol.chat.v1.StreamEvent.Typing
	(*StreamEvent_PermissionUpdated)(nil),             // 27: protocol.chat.v1.StreamEvent.PermissionUpdated
	(*StreamEvent_MessagePinned)(nil),                 // 28: protocol.chat.v1.StreamEvent.MessagePinned
	(*StreamEvent_MessageUnpinned)(nil),               // 29: protocol.chat.v1.StreamEvent.MessageUnpinned
	(*Message)(nil),                                   // 30: protocol.chat.v1.Message
	(*timestamppb.Timestamp)(nil),                     // 31: google.protobuf.Timestamp
	(*v1.ItemPosition)(nil),                           // 32: protocol.harmonytypes.v1.ItemPosition
	(*v1.Metadata)(nil),                               // 33: protocol.harmonytypes.v1.Metadata
	(*Role)(nil),                                      // 34: protocol.chat.v1.Role
	(*PermissionList)(nil),                            // 35: protocol.chat.v1.PermissionList
}
var file_chat_v1_stream_proto_depIdxs = []int32{
	3,  // 0: protocol.chat.v1.StreamRequest.subscribe_to_guild:type_name -> protocol.chat.v1.StreamRequest.SubscribeToGuild
	4,  // 1: protocol.chat.v1.StreamRequest.subscribe_to_actions:type_name -> protocol.chat.v1.StreamRequest.SubscribeToActions
	5,  // 2: protocol.chat.v1.StreamRequest.subscribe_to_homeserver_events:type_name -> protocol.chat.v1.StreamRequest.SubscribeToHomeserverEvents
	17, // 3: protocol.chat.v1.StreamEvent.guild_added_to_list:type_name -> protocol.chat.v1.StreamEvent.GuildAddedToList
	18, // 4: protocol.chat.v1.StreamEvent.guild_removed_from_list:type_name -> protocol.chat.v1.StreamEvent.GuildRemovedFromList
	19, // 5: protocol.chat.v1.StreamEvent.action_performed:type_name -> protocol.chat.v1.StreamEvent.ActionPerformed
	6,  // 6: protocol.chat.v1.StreamEvent.sent_message:type_name -> protocol.chat.v1.StreamEvent.MessageSent
	7,  // 7: protocol.chat.v1.StreamEvent.edited_message:type_name -> protocol.chat.v1.StreamEvent.MessageUpdated
	8,  // 8: protocol.chat.v1.StreamEvent.deleted_message:type_name -> protocol.chat.v1.StreamEvent.MessageDeleted
	9,  // 9: protocol.chat.v1.StreamEvent.created_channel:type_name -> protocol.chat.v1.StreamEvent.ChannelCreated
	10, // 10: protocol.chat.v1.StreamEvent.edited_channel:type_name -> protocol.chat.v1.StreamEvent.ChannelUpdated
	12, // 11: protocol.chat.v1.StreamEvent.deleted_channel:type_name -> protocol.chat.v1.StreamEvent.ChannelDeleted
	11, // 12: protocol.chat.v1.StreamEvent.channels_reordered:type_name -> protocol.chat.v1.StreamEvent.ChannelsReordered
	13, // 13: protocol.chat.v1.StreamEvent.edited_guild:type_name -> protocol.chat.v1.StreamEvent.GuildUpdated
	14, // 14: protocol.chat.v1.StreamEvent.deleted_guild:type_name -> protocol.chat.v1.StreamEvent.GuildDeleted
	15, // 15: protocol.chat.v1.StreamEvent.joined_member:type_name -> protocol.chat.v1.StreamEvent.MemberJoined
	16, // 16: protocol.chat.v1.StreamEvent.left_member:type_name -> protocol.chat.v1.StreamEvent.MemberLeft
	26, // 17: protocol.chat.v1.StreamEvent.typing:type_name -> protocol.chat.v1.StreamEvent.Typing
	22, // 18: protocol.chat.v1.StreamEvent.role_created:type_name -> protocol.chat.v1.StreamEvent.RoleCreated
	21, // 19: protocol.chat.v1.StreamEvent.role_deleted:type_name -> protocol.chat.v1.StreamEvent.RoleDeleted
	20, // 20: protocol.chat.v1.StreamEvent.role_moved:type_name -> protocol.chat.v1.StreamEvent.RoleMoved
	23, // 21: protocol.chat.v1.StreamEvent.role_updated:type_name -> protocol.chat.v1.StreamEvent.RoleUpdated
	24, // 22: protocol.chat.v1.StreamEvent.role_perms_updated:type_name -> protocol.chat.v1.StreamEvent.RolePermissionsUpdated
	25, // 23: protocol.chat.v1.StreamEvent.user_roles_updated:type_name -> protocol.chat.v1.StreamEvent.UserRolesUpdated
	27, // 24: protocol.chat.v1.StreamEvent.permission_updated:type_name -> protocol.chat.v1.StreamEvent.PermissionUpdated
	28, // 25: protocol.chat.v1.StreamEvent.message_pinned:type_name -> protocol.chat.v1.StreamEvent.MessagePinned
	29, // 26: protocol.chat.v1.StreamEvent.message_unpinned:type_name -> protocol.chat.v1.StreamEvent.MessageUnpinned
	30, // 27: protocol.chat.v1.StreamEvent.MessageSent.message:type_name -> protocol.chat.v1.Message
	31, // 28: protocol.chat.v1.StreamEvent.MessageUpdated.edited_at:type_name -> google.protobuf.Timestamp
	32, // 29: protocol.chat.v1.StreamEvent.ChannelCreated.position:type_name -> protocol.harmonytypes.v1.ItemPosition
	33, // 30: protocol.chat.v1.StreamEvent.ChannelCreated.metadata:type_name -> protocol.harmonytypes.v1.Metadata
	32, // 31: protocol.chat.v1.StreamEvent.ChannelUpdated.new_position:type_name -> protocol.harmonytypes.v1.ItemPosition
	33, // 32: protocol.chat.v1.StreamEvent.ChannelUpdated.new_metadata:type_name -> protocol.harmonytypes.v1.Metadata
	33, // 33: protocol.chat.v1.StreamEvent.GuildUpdated.new_metadata:type_name -> protocol.harmonytypes.v1.Metadata
	0,  // 34: protocol.chat.v1.StreamEvent.MemberLeft.leave_reason:type_name -> protocol.chat.v1.StreamEvent.LeaveReason
	32, // 35: protocol.chat.v1.StreamEvent.RoleMoved.new_position:type_name -> protocol.harmonytypes.v1.ItemPosition
	34, // 36: protocol.chat.v1.StreamEvent.RoleCreated.role:type_name -> protocol.chat.v1.Role
	34, // 37: protocol.chat.v1.StreamEvent.RoleUpdated.new_role:type_name -> protocol.chat.v1.Role
	35, // 38: protocol.chat.v1.StreamEvent.RolePermissionsUpdated.new_perms:type_name -> protocol.chat.v1.PermissionList
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_chat_v1_stream_proto_init() }
func file_chat_v1_stream_proto_init() {
	if File_chat_v1_stream_proto != nil {
		return
	}
	file_chat_v1_permissions_proto_init()
	file_chat_v1_messages_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_chat_v1_stream_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest_SubscribeToGuild); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest_SubscribeToActions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamRequest_SubscribeToHomeserverEvents); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MessageSent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MessageUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MessageDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_ChannelCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_ChannelUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_ChannelsReordered); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_ChannelDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_GuildUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_GuildDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MemberJoined); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MemberLeft); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_GuildAddedToList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_GuildRemovedFromList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_ActionPerformed); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_RoleMoved); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_RoleDeleted); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_RoleCreated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_RoleUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_RolePermissionsUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_UserRolesUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_Typing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_PermissionUpdated); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MessagePinned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_chat_v1_stream_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StreamEvent_MessageUnpinned); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_chat_v1_stream_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*StreamRequest_SubscribeToGuild_)(nil),
		(*StreamRequest_SubscribeToActions_)(nil),
		(*StreamRequest_SubscribeToHomeserverEvents_)(nil),
	}
	file_chat_v1_stream_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*StreamEvent_GuildAddedToList_)(nil),
		(*StreamEvent_GuildRemovedFromList_)(nil),
		(*StreamEvent_ActionPerformed_)(nil),
		(*StreamEvent_SentMessage)(nil),
		(*StreamEvent_EditedMessage)(nil),
		(*StreamEvent_DeletedMessage)(nil),
		(*StreamEvent_CreatedChannel)(nil),
		(*StreamEvent_EditedChannel)(nil),
		(*StreamEvent_DeletedChannel)(nil),
		(*StreamEvent_ChannelsReordered_)(nil),
		(*StreamEvent_EditedGuild)(nil),
		(*StreamEvent_DeletedGuild)(nil),
		(*StreamEvent_JoinedMember)(nil),
		(*StreamEvent_LeftMember)(nil),
		(*StreamEvent_Typing_)(nil),
		(*StreamEvent_RoleCreated_)(nil),
		(*StreamEvent_RoleDeleted_)(nil),
		(*StreamEvent_RoleMoved_)(nil),
		(*StreamEvent_RoleUpdated_)(nil),
		(*StreamEvent_RolePermsUpdated)(nil),
		(*StreamEvent_UserRolesUpdated_)(nil),
		(*StreamEvent_PermissionUpdated_)(nil),
		(*StreamEvent_MessagePinned_)(nil),
		(*StreamEvent_MessageUnpinned_)(nil),
	}
	file_chat_v1_stream_proto_msgTypes[9].OneofWrappers = []interface{}{}
	file_chat_v1_stream_proto_msgTypes[12].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chat_v1_stream_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_chat_v1_stream_proto_goTypes,
		DependencyIndexes: file_chat_v1_stream_proto_depIdxs,
		EnumInfos:         file_chat_v1_stream_proto_enumTypes,
		MessageInfos:      file_chat_v1_stream_proto_msgTypes,
	}.Build()
	File_chat_v1_stream_proto = out.File
	file_chat_v1_stream_proto_rawDesc = nil
	file_chat_v1_stream_proto_goTypes = nil
	file_chat_v1_stream_proto_depIdxs = nil
}
