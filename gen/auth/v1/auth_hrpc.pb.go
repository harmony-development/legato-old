// SPDX-FileCopyrightText: 2021 None
//
// SPDX-License-Identifier: CC0-1.0

// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package authv1

import (
	context "context"
	errors "errors"
	server "github.com/harmony-development/hrpc/server"
	proto "google.golang.org/protobuf/proto"
)

type AuthServiceServer interface {
	// Federate with a foreignserver, obtaining a token
	// you can use to call LoginFederated on it
	Federate(context.Context, *FederateRequest) (*FederateResponse, error)
	// Present a token to a foreignserver from a Federate call
	// on your homeserver in order to login
	LoginFederated(context.Context, *LoginFederatedRequest) (*LoginFederatedResponse, error)
	// Returns the public key of this server
	Key(context.Context, *KeyRequest) (*KeyResponse, error)
	// Begins an authentication session
	BeginAuth(context.Context, *BeginAuthRequest) (*BeginAuthResponse, error)
	// Goes to the next step of the authentication session,
	// possibly presenting user input
	NextStep(context.Context, *NextStepRequest) (*NextStepResponse, error)
	// Goes to the previous step of the authentication session
	// if possible
	StepBack(context.Context, *StepBackRequest) (*StepBackResponse, error)
	// Consume the steps of an authentication session
	// as a stream
	StreamSteps(context.Context, *StreamStepsRequest) (chan *StreamStepsResponse, error)
	// Check whether or not you're logged in and the session is valid
	CheckLoggedIn(context.Context, *CheckLoggedInRequest) (*CheckLoggedInResponse, error)
}

type DefaultAuthService struct{}

func (DefaultAuthService) Federate(context.Context, *FederateRequest) (*FederateResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) LoginFederated(context.Context, *LoginFederatedRequest) (*LoginFederatedResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) Key(context.Context, *KeyRequest) (*KeyResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) BeginAuth(context.Context, *BeginAuthRequest) (*BeginAuthResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) NextStep(context.Context, *NextStepRequest) (*NextStepResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) StepBack(context.Context, *StepBackRequest) (*StepBackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) StreamSteps(context.Context, *StreamStepsRequest) (chan *StreamStepsResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultAuthService) CheckLoggedIn(context.Context, *CheckLoggedInRequest) (*CheckLoggedInResponse, error) {
	return nil, errors.New("unimplemented")
}

type AuthServiceHandler struct {
	Server AuthServiceServer
}

func NewAuthServiceHandler(server AuthServiceServer) *AuthServiceHandler {
	return &AuthServiceHandler{Server: server}
}
func (h *AuthServiceHandler) Name() string {
	return "AuthService"
}
func (h *AuthServiceHandler) Routes() map[string]server.RawHandler {
	return map[string]server.RawHandler{
		"/protocol.auth.v1.AuthService.Federate/": server.NewUnaryHandler(&FederateRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.Federate(c, req.(*FederateRequest))
		}),
		"/protocol.auth.v1.AuthService.LoginFederated/": server.NewUnaryHandler(&LoginFederatedRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.LoginFederated(c, req.(*LoginFederatedRequest))
		}),
		"/protocol.auth.v1.AuthService.Key/": server.NewUnaryHandler(&KeyRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.Key(c, req.(*KeyRequest))
		}),
		"/protocol.auth.v1.AuthService.BeginAuth/": server.NewUnaryHandler(&BeginAuthRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.BeginAuth(c, req.(*BeginAuthRequest))
		}),
		"/protocol.auth.v1.AuthService.NextStep/": server.NewUnaryHandler(&NextStepRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.NextStep(c, req.(*NextStepRequest))
		}),
		"/protocol.auth.v1.AuthService.StepBack/": server.NewUnaryHandler(&StepBackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.StepBack(c, req.(*StepBackRequest))
		}),
		"/protocol.auth.v1.AuthService.CheckLoggedIn/": server.NewUnaryHandler(&CheckLoggedInRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.CheckLoggedIn(c, req.(*CheckLoggedInRequest))
		}),
	}
}
