// SPDX-FileCopyrightText: 2021 None
//
// SPDX-License-Identifier: CC0-1.0

// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package voicev1

import (
	bytes "bytes"
	context "context"
	errors "errors"
	proto "google.golang.org/protobuf/proto"
	ioutil "io/ioutil"
	http "net/http"
	httptest "net/http/httptest"
)

type VoiceServiceClient interface {
	// Endpoint to connect to a voice channel.
	Connect(context.Context, *ConnectRequest) (*ConnectResponse, error)
	// Endpoint to stream states of a voice connection.
	StreamState(context.Context, *StreamStateRequest) (chan *StreamStateResponse, error)
}

type HTTPVoiceServiceClient struct {
	Client  http.Client
	BaseURL string
}

func (client *HTTPVoiceServiceClient) Connect(req *ConnectRequest) (*ConnectResponse, error) {
	data, marshalErr := proto.Marshal(req)
	if marshalErr != nil {
		return nil, marshalErr
	}
	reader := bytes.NewReader(data)
	resp, err := client.Client.Post(client.BaseURL+"/protocol.voice.v1.VoiceService.Connect/", "application/hrpc", reader)
	if err != nil {
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	ret := &ConnectResponse{}
	unmarshalErr := proto.Unmarshal(body, ret)
	if unmarshalErr != nil {
		return nil, unmarshalErr
	}
	return ret, nil
}
func (client *HTTPVoiceServiceClient) StreamState(req *StreamStateRequest) (chan *StreamStateResponse, error) {
	return nil, errors.New("unimplemented")
}

type HTTPTestVoiceServiceClient struct {
	Client interface {
		Test(*http.Request, ...int) (*http.Response, error)
	}
}

func (client *HTTPTestVoiceServiceClient) Connect(req *ConnectRequest) (*ConnectResponse, error) {
	data, marshalErr := proto.Marshal(req)
	if marshalErr != nil {
		return nil, marshalErr
	}
	reader := bytes.NewReader(data)
	testreq := httptest.NewRequest("POST", "/protocol.voice.v1.VoiceService.Connect/", reader)
	resp, err := client.Client.Test(testreq)
	if err != nil {
		return nil, err
	}
	body, err := ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}
	ret := &ConnectResponse{}
	unmarshalErr := proto.Unmarshal(body, ret)
	if unmarshalErr != nil {
		return nil, unmarshalErr
	}
	return ret, nil
}
func (client *HTTPTestVoiceServiceClient) StreamState(req *StreamStateRequest) (chan *StreamStateResponse, error) {
	return nil, errors.New("unimplemented")
}
