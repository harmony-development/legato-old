// SPDX-FileCopyrightText: 2021 None
//
// SPDX-License-Identifier: CC0-1.0

// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package mediaproxyv1

import (
	context "context"
	errors "errors"
	server "github.com/harmony-development/hrpc/server"
	proto "google.golang.org/protobuf/proto"
)

type MediaProxyServiceServer interface {
	// Endpoint to fetch metadata for a URL.
	FetchLinkMetadata(context.Context, *FetchLinkMetadataRequest) (*FetchLinkMetadataResponse, error)
	// Endpoint to instant view a website URL.
	InstantView(context.Context, *InstantViewRequest) (*InstantViewResponse, error)
	// Endpoint to query if the server can generate an instant view for a website URL.
	CanInstantView(context.Context, *CanInstantViewRequest) (*CanInstantViewResponse, error)
}

type DefaultMediaProxyService struct{}

func (DefaultMediaProxyService) FetchLinkMetadata(context.Context, *FetchLinkMetadataRequest) (*FetchLinkMetadataResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultMediaProxyService) InstantView(context.Context, *InstantViewRequest) (*InstantViewResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultMediaProxyService) CanInstantView(context.Context, *CanInstantViewRequest) (*CanInstantViewResponse, error) {
	return nil, errors.New("unimplemented")
}

type MediaProxyServiceHandler struct {
	Server MediaProxyServiceServer
}

func NewMediaProxyServiceHandler(server MediaProxyServiceServer) *MediaProxyServiceHandler {
	return &MediaProxyServiceHandler{Server: server}
}
func (h *MediaProxyServiceHandler) Name() string {
	return "MediaProxyService"
}
func (h *MediaProxyServiceHandler) Routes() map[string]server.RawHandler {
	return map[string]server.RawHandler{
		"/protocol.mediaproxy.v1.MediaProxyService.FetchLinkMetadata/": server.NewUnaryHandler(&FetchLinkMetadataRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.FetchLinkMetadata(c, req.(*FetchLinkMetadataRequest))
		}),
		"/protocol.mediaproxy.v1.MediaProxyService.InstantView/": server.NewUnaryHandler(&InstantViewRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.InstantView(c, req.(*InstantViewRequest))
		}),
		"/protocol.mediaproxy.v1.MediaProxyService.CanInstantView/": server.NewUnaryHandler(&CanInstantViewRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.CanInstantView(c, req.(*CanInstantViewRequest))
		}),
	}
}
