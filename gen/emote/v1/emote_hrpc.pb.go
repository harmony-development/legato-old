// SPDX-FileCopyrightText: 2021 Danil Korennykh <bluskript@gmail.com>
//
// SPDX-License-Identifier: AGPL-3.0-or-later

// Code generated by protoc-gen-go-hrpc. DO NOT EDIT.

package emotev1

import (
	context "context"
	errors "errors"
	server "github.com/harmony-development/hrpc/server"
	proto "google.golang.org/protobuf/proto"
)

type EmoteServiceServer interface {
	// Endpoint to create an emote pack.
	CreateEmotePack(context.Context, *CreateEmotePackRequest) (*CreateEmotePackResponse, error)
	// Endpoint to get the emote packs you have equipped.
	GetEmotePacks(context.Context, *GetEmotePacksRequest) (*GetEmotePacksResponse, error)
	// Endpoint to get the emotes in an emote pack.
	GetEmotePackEmotes(context.Context, *GetEmotePackEmotesRequest) (*GetEmotePackEmotesResponse, error)
	// Endpoint to add an emote to an emote pack that you own.
	AddEmoteToPack(context.Context, *AddEmoteToPackRequest) (*AddEmoteToPackResponse, error)
	// Endpoint to delete an emote pack that you own.
	DeleteEmotePack(context.Context, *DeleteEmotePackRequest) (*DeleteEmotePackResponse, error)
	// Endpoint to delete an emote from an emote pack.
	DeleteEmoteFromPack(context.Context, *DeleteEmoteFromPackRequest) (*DeleteEmoteFromPackResponse, error)
	// Endpoint to dequip an emote pack that you have equipped.
	DequipEmotePack(context.Context, *DequipEmotePackRequest) (*DequipEmotePackResponse, error)
	// Endpoint to equip an emote pack.
	EquipEmotePack(context.Context, *EquipEmotePackRequest) (*EquipEmotePackResponse, error)
}

type DefaultEmoteService struct{}

func (DefaultEmoteService) CreateEmotePack(context.Context, *CreateEmotePackRequest) (*CreateEmotePackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) GetEmotePacks(context.Context, *GetEmotePacksRequest) (*GetEmotePacksResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) GetEmotePackEmotes(context.Context, *GetEmotePackEmotesRequest) (*GetEmotePackEmotesResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) AddEmoteToPack(context.Context, *AddEmoteToPackRequest) (*AddEmoteToPackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) DeleteEmotePack(context.Context, *DeleteEmotePackRequest) (*DeleteEmotePackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) DeleteEmoteFromPack(context.Context, *DeleteEmoteFromPackRequest) (*DeleteEmoteFromPackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) DequipEmotePack(context.Context, *DequipEmotePackRequest) (*DequipEmotePackResponse, error) {
	return nil, errors.New("unimplemented")
}
func (DefaultEmoteService) EquipEmotePack(context.Context, *EquipEmotePackRequest) (*EquipEmotePackResponse, error) {
	return nil, errors.New("unimplemented")
}

type EmoteServiceHandler struct {
	Server EmoteServiceServer
}

func NewEmoteServiceHandler(server EmoteServiceServer) *EmoteServiceHandler {
	return &EmoteServiceHandler{Server: server}
}
func (h *EmoteServiceHandler) Name() string {
	return "EmoteService"
}
func (h *EmoteServiceHandler) Routes() map[string]server.RawHandler {
	return map[string]server.RawHandler{
		"/protocol.emote.v1.EmoteService.CreateEmotePack/": server.NewUnaryHandler(&CreateEmotePackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.CreateEmotePack(c, req.(*CreateEmotePackRequest))
		}),
		"/protocol.emote.v1.EmoteService.GetEmotePacks/": server.NewUnaryHandler(&GetEmotePacksRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.GetEmotePacks(c, req.(*GetEmotePacksRequest))
		}),
		"/protocol.emote.v1.EmoteService.GetEmotePackEmotes/": server.NewUnaryHandler(&GetEmotePackEmotesRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.GetEmotePackEmotes(c, req.(*GetEmotePackEmotesRequest))
		}),
		"/protocol.emote.v1.EmoteService.AddEmoteToPack/": server.NewUnaryHandler(&AddEmoteToPackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.AddEmoteToPack(c, req.(*AddEmoteToPackRequest))
		}),
		"/protocol.emote.v1.EmoteService.DeleteEmotePack/": server.NewUnaryHandler(&DeleteEmotePackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.DeleteEmotePack(c, req.(*DeleteEmotePackRequest))
		}),
		"/protocol.emote.v1.EmoteService.DeleteEmoteFromPack/": server.NewUnaryHandler(&DeleteEmoteFromPackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.DeleteEmoteFromPack(c, req.(*DeleteEmoteFromPackRequest))
		}),
		"/protocol.emote.v1.EmoteService.DequipEmotePack/": server.NewUnaryHandler(&DequipEmotePackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.DequipEmotePack(c, req.(*DequipEmotePackRequest))
		}),
		"/protocol.emote.v1.EmoteService.EquipEmotePack/": server.NewUnaryHandler(&EquipEmotePackRequest{}, func(c context.Context, req proto.Message) (proto.Message, error) {
			return h.Server.EquipEmotePack(c, req.(*EquipEmotePackRequest))
		}),
	}
}
